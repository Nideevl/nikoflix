🌐 Frontend (React – Routes)
-----------------------------

/browse → Homepage (mixed content feed).

/browse/movies → Movies section.

/browse/movies/:id → Modal overlay with movie details (poster, cast, likes, etc).

/browse/series → Series/Anime section.

/browse/series/:id → Modal overlay with seasons + episodes.

🔑 Note: With React Router implementation of modal routes so the modal opens without leaving /browse.


🔐 Auth
--------

/auth/login

/auth/register

/auth/forgot-password

Handled via JWT + bcrypt on Node backend, stored in Postgres (users table).


⚙️ Admin
---------

/admin → Dashboard.

/admin/movies → Upload/manage movies.

/admin/series → Upload/manage series/seasons/episodes.

/admin/requests → View & mark user content requests as fulfilled/unfulfilled.

Protected by isAdmin field in users table.


🛠 Backend (Node.js + Express – APIs)
-------------------------------------

/api/movies → CRUD for movies.

/api/series → CRUD for series, seasons, episodes.

/api/auth → Register, login, logout, reset password.

/api/admin → Admin-only actions (middleware checks isAdmin).

/api/requests → User requests for new movies/series.


🗄 Database (PostgreSQL – Final Schema)
----------------------------------------

You already have this ✅

users (auth, roles)

movies (details, language, poster, wide poster, hash_code)

series (franchise, poster, wide poster, parent_series_id, is_animated, language)

seasons (series_id, season_number, title, year)

episodes (season_id, episode_number, title, hash_code)

cast (linked to movies/series if not animated)

reviews (likes + comments)

requests (user-submitted, with fulfilled/unfulfilled flag)


🚀 Stack = PERN
----------------

Postgres → database.

Express (Node) → backend API.

React → frontend (with modal routes).

Node → runtime.

------------------------
What goes in Redis (temporary cache, speed layer)

Think: read-heavy, frequently accessed, or expiring data

🔹 Trending content list (since homepage is accessed the most)

Example: trending:general → [movieIds...]

🔹 Individual movie/series detail pages (cache for X minutes)

Example: movie:123 → {...data from Postgres}

🔹 Auth sessions / OTP codes (short-lived)

Example: otp:user@gmail.com → 482918 (TTL: 5min)

🔹 Rate limits / request counters

Example: rate:user123 → 5 requests in last minute

---------------------------
What NOT to put in Redis

❌ Large videos or images (use Cloudinary/CDN)

❌ Permanent relational data (episodes, reviews, requests)

❌ Anything you can’t rebuild from Postgres
